# GitHub Actions workflow for Smart AST Analyzer
# This example shows how to integrate Smart AST Analyzer into your CI/CD pipeline

name: Smart AST Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly analysis on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  ast-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Smart AST Analyzer
      run: |
        npm install -g smart-ast-analyzer
        # Install AI CLI (choose one based on your preference)
        npm install -g @google-ai/generativelanguage-cli
        # npm install -g @anthropic-ai/claude-cli
    
    - name: Setup AI credentials
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        # Configure your AI CLI here
        # Example for Gemini CLI:
        echo "Setting up AI CLI credentials..."
        # gemini auth login --api-key $GEMINI_API_KEY
    
    - name: Run Full Analysis
      run: |
        smart-ast analyze \
          --ai gemini \
          --type full \
          --format json \
          --output ./ast-reports \
          --max-files 100 \
          --verbose
    
    - name: Run API Security Analysis
      run: |
        smart-ast analyze \
          --ai gemini \
          --type auth \
          --format json \
          --output ./security-reports \
          --include "**/*.js,**/*.ts" \
          --exclude "**/*.test.*,**/*.spec.*"
    
    - name: Generate Summary Report
      run: |
        # Create a summary from the JSON reports
        node -e "
          const fs = require('fs');
          const reports = fs.readdirSync('./ast-reports')
            .filter(f => f.endsWith('.json'))
            .map(f => JSON.parse(fs.readFileSync(\`./ast-reports/\${f}\`, 'utf-8')));
          
          const summary = {
            timestamp: new Date().toISOString(),
            overallScore: reports[0]?.metrics?.overallScore || 'N/A',
            insights: reports[0]?.insights?.slice(0, 5) || [],
            recommendations: reports[0]?.recommendations?.slice(0, 3) || []
          };
          
          fs.writeFileSync('./summary.json', JSON.stringify(summary, null, 2));
          console.log('Analysis Summary:', JSON.stringify(summary, null, 2));
        "
    
    - name: Upload Analysis Reports
      uses: actions/upload-artifact@v3
      with:
        name: ast-analysis-reports
        path: |
          ./ast-reports/
          ./security-reports/
          ./summary.json
        retention-days: 30
    
    - name: Comment PR with Analysis Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = JSON.parse(fs.readFileSync('./summary.json', 'utf-8'));
            
            const comment = `
          ## üîç Smart AST Analysis Results
          
          **Overall Score:** ${summary.overallScore}/100
          
          ### üí° Key Insights:
          ${summary.insights.map(insight => `- ${insight}`).join('\n')}
          
          ### üéØ Top Recommendations:
          ${summary.recommendations.map((rec, i) => `${i + 1}. **${rec.title}** (${rec.priority} priority)\n   ${rec.description}`).join('\n\n')}
          
          üìä [View full analysis reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *Generated by Smart AST Analyzer at ${summary.timestamp}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create PR comment:', error.message);
          }
    
    - name: Check Quality Gates
      run: |
        node -e "
          const fs = require('fs');
          
          try {
            const summary = JSON.parse(fs.readFileSync('./summary.json', 'utf-8'));
            const score = parseInt(summary.overallScore) || 0;
            
            console.log(\`Overall Score: \${score}/100\`);
            
            // Quality gates
            if (score < 50) {
              console.log('‚ùå Quality gate failed: Score below 50');
              process.exit(1);
            } else if (score < 70) {
              console.log('‚ö†Ô∏è  Quality gate warning: Score below 70');
              process.exit(0); // Don't fail, but warn
            } else {
              console.log('‚úÖ Quality gate passed: Score above 70');
              process.exit(0);
            }
          } catch (error) {
            console.log('Could not check quality gates:', error.message);
            process.exit(0); // Don't fail on missing data
          }
        "

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: ast-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Smart AST Analyzer
      run: npm install -g smart-ast-analyzer
    
    - name: Security-focused Analysis
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        smart-ast analyze \
          --ai gemini \
          --type auth \
          --format json \
          --output ./security-only \
          --include "**/*.js,**/*.ts,**/*.jsx,**/*.tsx" \
          --exclude "**/*.test.*,**/*.spec.*" \
          --max-files 75
    
    - name: Check Security Issues
      run: |
        node -e "
          const fs = require('fs');
          const glob = require('glob');
          
          try {
            const reportFiles = glob.sync('./security-only/*.json');
            if (reportFiles.length === 0) {
              console.log('No security reports generated');
              process.exit(0);
            }
            
            const report = JSON.parse(fs.readFileSync(reportFiles[0], 'utf-8'));
            const authResults = report.results?.auth;
            
            if (!authResults) {
              console.log('No authentication analysis results');
              process.exit(0);
            }
            
            const vulnerabilities = authResults.security?.vulnerabilities || [];
            const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical');
            const highVulns = vulnerabilities.filter(v => v.severity === 'high');
            
            console.log(\`Security Analysis Results:\`);
            console.log(\`- Total vulnerabilities: \${vulnerabilities.length}\`);
            console.log(\`- Critical: \${criticalVulns.length}\`);
            console.log(\`- High: \${highVulns.length}\`);
            
            if (criticalVulns.length > 0) {
              console.log('‚ùå Critical security vulnerabilities found!');
              criticalVulns.forEach(vuln => {
                console.log(\`  - \${vuln.description}\`);
              });
              process.exit(1);
            } else if (highVulns.length > 3) {
              console.log('‚ö†Ô∏è  Too many high-severity vulnerabilities');
              process.exit(1);
            } else {
              console.log('‚úÖ Security check passed');
              process.exit(0);
            }
          } catch (error) {
            console.log('Security analysis error:', error.message);
            process.exit(0); // Don't fail CI on analysis errors
          }
        "
    
    - name: Upload Security Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-analysis-report
        path: ./security-only/